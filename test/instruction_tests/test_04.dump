
0x00000000  0x00a00093  addi x1,x0,10                4    addi x1,  x0, 10        # x1 = 10                         | 00A00093
0x00000004  0x00500113  addi x2,x0,5                 5    addi x2,  x0, 5         # x2 = 5                          | 00500113
0x00000008  0x002081b3  add x3,x1,x2                 6    add  x3,  x1, x2        # x3 = x1 + x2 = 15               | 002081B3
0x0000000c  0x40208233  sub x4,x1,x2                 7    sub  x4,  x1, x2        # x4 = x1 - x2 = 5                | 40208233
0x00000010  0x00209293  slli x5,x1,2                 8    slli x5, x1, 2          # x5 = x1 << 2 = 40               | 002092B3
0x00000014  0x0012d313  srli x6,x5,1                 9    srli x6, x5, 1          # x6 = x5 >> 1 = 20 (logical)     | 0012D333
0x00000018  0x4012d393  srai x7,x5,1                 10   srai x7, x5, 1          # x7 = x5 >> 1 = 20 (arithm.)     | 4012D3B3
0x0000001c  0x00f0f413  andi x8,x1,15                15   andi x8,  x1, 0xF       # x8 = x1 & 0xF = 10              | 00F07413
0x00000020  0x00816493  ori x9,x2,8                  16   ori  x9,  x2, 0x8       # x9 = x2 | 0x8 = 13              | 00816493
0x00000024  0x0050c513  xori x10,x1,5                17   xori x10, x1, 0x5       # x10 = x1 ^ 0x5 = 15             | 00504513
0x00000028  0x009475b3  and x11,x8,x9                18   and  x11, x8, x9        # x11 = x8 & x9 = 8               | 009475B3
0x0000002c  0x00946633  or x12,x8,x9                 19   or   x12, x8, x9        # x12 = x8 | x9 = 15              | 00946633
0x00000030  0x009446b3  xor x13,x8,x9                20   xor  x13, x8, x9        # x13 = x8 ^ x9 = 7               | 009446B3
0x00000034  0x00000713  addi x14,x0,0                25   addi x14, x0, 0         # x14 = 0 (base adresi)           | 0000070B3
0x00000038  0x00372023  sw x3,0(x14)                 26   sw   x3,  0(x14)        # Mem[0] = x3 = 15                | 00372023
0x0000003c  0x00472223  sw x4,4(x14)                 27   sw   x4,  4(x14)        # Mem[4] = x4 = 5                 | 00472223
0x00000040  0x00570423  sb x5,8(x14)                 28   sb   x5,  8(x14)        # Mem[8] = x5[7:0] = 0x28         | 00570423
0x00000044  0x00071783  lh x15,0(x14)                29   lh   x15, 0(x14)        # x15 = Mem[0] (signed half)      | 00071783
0x00000048  0x00472803  lw x16,4(x14)                30   lw   x16, 4(x14)        # x16 = Mem[4] = 5                | 00472803
0x0000004c  0x00870883  lb x17,8(x14)                31   lb   x17, 8(x14)        # x17 = Mem[8] (signed byte)      | 00870883
0x00000050  0x00874903  lbu x18,8(x14)               32   lbu  x18, 8(x14)        # x18 = Mem[8] (unsigned byte)    | 00874903
0x00000054  0x00500093  addi x1,x0,5                 37   addi x1,  x0, 5         # x1 = 5                          | 00500093
0x00000058  0x00a00113  addi x2,x0,10                38   addi x2,  x0, 10        # x2 = 10                         | 00A00113
0x0000005c  0x0020c663  blt x1,x2,0x0000000c         39   blt  x1,  x2, L1        # if x1 < x2 jump to L1           | 0020C063
0x00000060  0x01400193  addi x3,x0,20                40   addi x3,  x0, 20        # (atlanmalı) x3 = 20             | 014001B3
0x00000064  0x01c0006f  jal x0,0x0000001c            41   j    END                # j to END                        | 0140006F
0x00000068  0x01e00193  addi x3,x0,30                44   addi x3,  x0, 30        # x3 = 30 (dallanma başarılı)     | 01E001B3
0x0000006c  0x01400093  addi x1,x0,20                45   addi x1,  x0, 20        # x1 = 20                         | 01400093
0x00000070  0x00100113  addi x2,x0,1                 46   addi x2,  x0, 1         # x2 = 1                          | 00100113
0x00000074  0x00208463  beq x1,x2,0x00000008         47   beq  x1,  x2, L2        # if x1 == x2 → L2 (false)        | 00208063
0x00000078  0x0080006f  jal x0,0x00000008            48   j    END                # jump to END                     | 0040006F
0x0000007c  0x01f00313  addi x6,x0,31                51   addi x6,  x0, 31        # (atlanmalı) x6 = 31             | 01F00313
0x00000080  0x00302023  sw x3,0(x0)                  54   sw   x3,  0(x0)         # Mem[0] = x3 = 30                | 00302023
0x00000084  0x008000ef  jal x1,0x00000008            59   jal  ra, jump_target    # ra = PC+4, jump to jump_target  | 008000EF
0x00000088  0x06400c93  addi x25,x0,0x00000064       60   addi x25, x0, 100       # (atlanmalı) x25 = 100           | 06400C93
0x0000008c  0x06e00d13  addi x26,x0,0x0000006e       63   addi x26, x0, 110       # x26 = 110                       | 06E00D13
0x00000090  0x000080e7  jalr x1,x1,0                 64   jalr ra,ra,0x00          # jump to ra, x0 = discard return | 00008067
0x00000094  0x06500c93  addi x25,x0,0x00000065       65   addi x25, x0, 101       # x25 = 101 (dönüş sonrası)       | 06500C93
0x00000098  0x12345db7  lui x27,0x00012345           70   lui   x27, 0x12345      # x27 = 0x12345000                | 012345DB7
0x0000009c  0x6789ae17  auipc x28,0x0006789a         71   auipc x28, 0x6789A      # x28 = PC + 0x6789A000           | 06789AEC7
0x000000a0  0x0000006f  jal x0,0x00000000            80   j end_program           # sonsuz döngü                    | 0000006F