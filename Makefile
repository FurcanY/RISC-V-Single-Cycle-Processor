# ========================
# Kaynak Dosyalarƒ±nƒ±n Tanƒ±mƒ±
# ========================
SV_FILES  := $(wildcard ./src/pkg/*.sv) $(wildcard ./src/rtl/*.sv)
ALL_TB    := $(wildcard ./tb/*.sv)
ALL_FILES := ${SV_FILES} ${ALL_TB}
# ========================
# Varsayƒ±lan Testbench (TB= ile override edilebilir)
# ========================
TB        ?= alu_tb
TOP       := $(TB)
TB_FILE   := ./tb/$(TB).sv

# ========================
# Lint
# ========================
lint:
	@echo "‚ñ∂ Lint kontrol√º yapƒ±lƒ±yor..."
	verilator --lint-only -Wall --timing -Wno-UNUSED --top-module $(TB) -Wno-CASEINCOMPLETE -Wno-MULTIDRIVEN $(ALL_FILES)

# ========================
# Build
# ========================
build:
	@if [ ! -f $(TB_FILE) ]; then \
	  echo "‚ùå HATA: Testbench dosyasƒ± '$(TB_FILE)' bulunamadƒ±!"; \
	  exit 1; \
	fi
	@echo "‚ñ∂ Build ediliyor: $(TB_FILE)"
	verilator --binary $(SV_FILES) $(TB_FILE) --top $(TOP) -j 0 --trace -Wno-CASEINCOMPLETE -Wno-MULTIDRIVEN

# ========================
# Sim√ºlasyon √áalƒ±≈ütƒ±r
# ========================
run: build
	@echo "‚ñ∂ Sim√ºlasyon ba≈ülatƒ±lƒ±yor..."
	obj_dir/V$(TOP)

# ========================
# Waveform A√ß
# ========================
wave: run
	@echo "‚ñ∂ GTKWave a√ßƒ±lƒ±yor..."
	echo $PATH
	which gtkwave
	/usr/bin/gtkwave dumb.vcd
# ========================
# Temizlik
# ========================
clean:
	@echo "üßπ temp dosyalar siliniyor"
	@rm -f dump.vcd
	@rm -rf obj_dir
	@echo "‚úÖ temp dosyalar silindi"

# ========================
# Yardƒ±mcƒ± Bilgi
# ========================
help:
	@echo "--------------------------------------------------"
	@echo "  TB=modul_tb -> Kullanmak istediƒüin testbench adƒ±"
	@echo "  make build TB=modul_tb  -> sadece derle"
	@echo "  make run TB=modul_tb    -> derle ve √ßalƒ±≈ütƒ±r"
	@echo "  make wave TB=modul_tb   -> waveform g√∂r√ºnt√ºle"
	@echo "  make clean              -> t√ºm ge√ßici dosyalarƒ± sil"
	@echo "--------------------------------------------------"

