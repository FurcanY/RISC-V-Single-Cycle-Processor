# -----------------------------------------------------------------------------
# 1. Temel Aritmetik ve Immediate İşlemler
# -----------------------------------------------------------------------------
addi x1,  x0, 10        # x1 = 10                         | 00A00093
addi x2,  x0, 5         # x2 = 5                          | 00500113
add  x3,  x1, x2        # x3 = x1 + x2 = 15               | 002081B3
sub  x4,  x1, x2        # x4 = x1 - x2 = 5                | 40208233
slli x5, x1, 2          # x5 = x1 << 2 = 40               | 002092B3
srli x6, x5, 1          # x6 = x5 >> 1 = 20 (logical)     | 0012D333
srai x7, x5, 1          # x7 = x5 >> 1 = 20 (arithm.)     | 4012D3B3

# -----------------------------------------------------------------------------
# 2. Mantıksal İşlemler
# -----------------------------------------------------------------------------
andi x8,  x1, 0xF       # x8 = x1 & 0xF = 10              | 00F07413
ori  x9,  x2, 0x8       # x9 = x2 | 0x8 = 13              | 00816493
xori x10, x1, 0x5       # x10 = x1 ^ 0x5 = 15             | 00504513
and  x11, x8, x9        # x11 = x8 & x9 = 8               | 009475B3
or   x12, x8, x9        # x12 = x8 | x9 = 15              | 00946633
xor  x13, x8, x9        # x13 = x8 ^ x9 = 7               | 009446B3

# -----------------------------------------------------------------------------
# 3. Bellek Erişim İşlemleri (Load / Store)
# -----------------------------------------------------------------------------
addi x14, x0, 0         # x14 = 0 (base adresi)           | 0000070B3
sw   x3,  0(x14)        # Mem[0] = x3 = 15                | 00372023
sw   x4,  4(x14)        # Mem[4] = x4 = 5                 | 00472223
sb   x5,  8(x14)        # Mem[8] = x5[7:0] = 0x28         | 00570423
lh   x15, 0(x14)        # x15 = Mem[0] (signed half)      | 00071783
lw   x16, 4(x14)        # x16 = Mem[4] = 5                | 00472803
lb   x17, 8(x14)        # x17 = Mem[8] (signed byte)      | 00870883
lbu  x18, 8(x14)        # x18 = Mem[8] (unsigned byte)    | 00874903

# -----------------------------------------------------------------------------
# 4. Branch Testleri
# -----------------------------------------------------------------------------
addi x1,  x0, 5         # x1 = 5                          | 00500093
addi x2,  x0, 10        # x2 = 10                         | 00A00113
blt  x1,  x2, L1        # if x1 < x2 jump to L1           | 0020C063
addi x3,  x0, 20        # (atlanmalı) x3 = 20             | 014001B3
j    END                # j to END                        | 0140006F

L1:
addi x3,  x0, 30        # x3 = 30 (dallanma başarılı)     | 01E001B3
addi x1,  x0, 20        # x1 = 20                         | 01400093
addi x2,  x0, 1         # x2 = 1                          | 00100113
beq  x1,  x2, L2        # if x1 == x2 → L2 (false)        | 00208063
j    END                # jump to END                     | 0040006F

L2:
addi x6,  x0, 31        # (atlanmalı) x6 = 31             | 01F00313

END:
sw   x3,  0(x0)         # Mem[0] = x3 = 30                | 00302023

# -----------------------------------------------------------------------------
# 5. Atlama (Jumps)
# -----------------------------------------------------------------------------
jal  ra, jump_target    # ra = PC+4, jump to jump_target  | 008000EF
addi x25, x0, 100       # (atlanmalı) x25 = 100           | 06400C93

jump_target:
addi x26, x0, 110       # x26 = 110                       | 06E00D13
jalr ra,ra,0x00          # jump to ra, x0 = discard return | 00008067
addi x25, x0, 101       # x25 = 101 (dönüş sonrası)       | 06500C93

# -----------------------------------------------------------------------------
# 6. LUI / AUIPC
# -----------------------------------------------------------------------------
lui   x27, 0x12345      # x27 = 0x12345000                | 012345DB7
auipc x28, 0x6789A      # x28 = PC + 0x6789A000           | 06789AEC7

# -----------------------------------------------------------------------------
# 7. Sonsuz Döngü
# -----------------------------------------------------------------------------


end_program:
    
j end_program           # sonsuz döngü                    | 0000006F

