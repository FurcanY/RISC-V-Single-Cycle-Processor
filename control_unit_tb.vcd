$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $scope module control_unit_tb $end
   $var wire 32 2" NUM_TESTS [31:0] $end
   $var wire  4 %" alu_control [3:0] $end
   $var wire  2 &" alu_src_a_sel [1:0] $end
   $var wire  2 '" alu_src_b_sel [1:0] $end
   $var wire  1 1" branch_taken $end
   $var wire  3 (" branch_type [2:0] $end
   $var wire  1 * carry_flag $end
   $var wire  1 e carry_flag_arr[0] $end
   $var wire  1 f carry_flag_arr[1] $end
   $var wire  1 g carry_flag_arr[2] $end
   $var wire  1 h carry_flag_arr[3] $end
   $var wire  1 i carry_flag_arr[4] $end
   $var wire  1 j carry_flag_arr[5] $end
   $var wire  1 k carry_flag_arr[6] $end
   $var wire  1 l carry_flag_arr[7] $end
   $var wire 32 , error_count [31:0] $end
   $var wire  4 u exp_alu_control_arr[0] [3:0] $end
   $var wire  4 v exp_alu_control_arr[1] [3:0] $end
   $var wire  4 w exp_alu_control_arr[2] [3:0] $end
   $var wire  4 x exp_alu_control_arr[3] [3:0] $end
   $var wire  4 y exp_alu_control_arr[4] [3:0] $end
   $var wire  4 z exp_alu_control_arr[5] [3:0] $end
   $var wire  4 { exp_alu_control_arr[6] [3:0] $end
   $var wire  4 | exp_alu_control_arr[7] [3:0] $end
   $var wire  2 } exp_alu_src_a_sel_arr[0] [1:0] $end
   $var wire  2 ~ exp_alu_src_a_sel_arr[1] [1:0] $end
   $var wire  2 !! exp_alu_src_a_sel_arr[2] [1:0] $end
   $var wire  2 "! exp_alu_src_a_sel_arr[3] [1:0] $end
   $var wire  2 #! exp_alu_src_a_sel_arr[4] [1:0] $end
   $var wire  2 $! exp_alu_src_a_sel_arr[5] [1:0] $end
   $var wire  2 %! exp_alu_src_a_sel_arr[6] [1:0] $end
   $var wire  2 &! exp_alu_src_a_sel_arr[7] [1:0] $end
   $var wire  2 '! exp_alu_src_b_sel_arr[0] [1:0] $end
   $var wire  2 (! exp_alu_src_b_sel_arr[1] [1:0] $end
   $var wire  2 )! exp_alu_src_b_sel_arr[2] [1:0] $end
   $var wire  2 *! exp_alu_src_b_sel_arr[3] [1:0] $end
   $var wire  2 +! exp_alu_src_b_sel_arr[4] [1:0] $end
   $var wire  2 ,! exp_alu_src_b_sel_arr[5] [1:0] $end
   $var wire  2 -! exp_alu_src_b_sel_arr[6] [1:0] $end
   $var wire  2 .! exp_alu_src_b_sel_arr[7] [1:0] $end
   $var wire  1 7! exp_branch_taken_arr[0] $end
   $var wire  1 8! exp_branch_taken_arr[1] $end
   $var wire  1 9! exp_branch_taken_arr[2] $end
   $var wire  1 :! exp_branch_taken_arr[3] $end
   $var wire  1 ;! exp_branch_taken_arr[4] $end
   $var wire  1 <! exp_branch_taken_arr[5] $end
   $var wire  1 =! exp_branch_taken_arr[6] $end
   $var wire  1 >! exp_branch_taken_arr[7] $end
   $var wire  3 /! exp_branch_type_arr[0] [2:0] $end
   $var wire  3 0! exp_branch_type_arr[1] [2:0] $end
   $var wire  3 1! exp_branch_type_arr[2] [2:0] $end
   $var wire  3 2! exp_branch_type_arr[3] [2:0] $end
   $var wire  3 3! exp_branch_type_arr[4] [2:0] $end
   $var wire  3 4! exp_branch_type_arr[5] [2:0] $end
   $var wire  3 5! exp_branch_type_arr[6] [2:0] $end
   $var wire  3 6! exp_branch_type_arr[7] [2:0] $end
   $var wire  3 g! exp_imm_type_arr[0] [2:0] $end
   $var wire  3 h! exp_imm_type_arr[1] [2:0] $end
   $var wire  3 i! exp_imm_type_arr[2] [2:0] $end
   $var wire  3 j! exp_imm_type_arr[3] [2:0] $end
   $var wire  3 k! exp_imm_type_arr[4] [2:0] $end
   $var wire  3 l! exp_imm_type_arr[5] [2:0] $end
   $var wire  3 m! exp_imm_type_arr[6] [2:0] $end
   $var wire  3 n! exp_imm_type_arr[7] [2:0] $end
   $var wire  1 G! exp_mem_read_arr[0] $end
   $var wire  1 H! exp_mem_read_arr[1] $end
   $var wire  1 I! exp_mem_read_arr[2] $end
   $var wire  1 J! exp_mem_read_arr[3] $end
   $var wire  1 K! exp_mem_read_arr[4] $end
   $var wire  1 L! exp_mem_read_arr[5] $end
   $var wire  1 M! exp_mem_read_arr[6] $end
   $var wire  1 N! exp_mem_read_arr[7] $end
   $var wire  2 W! exp_mem_size_arr[0] [1:0] $end
   $var wire  2 X! exp_mem_size_arr[1] [1:0] $end
   $var wire  2 Y! exp_mem_size_arr[2] [1:0] $end
   $var wire  2 Z! exp_mem_size_arr[3] [1:0] $end
   $var wire  2 [! exp_mem_size_arr[4] [1:0] $end
   $var wire  2 \! exp_mem_size_arr[5] [1:0] $end
   $var wire  2 ]! exp_mem_size_arr[6] [1:0] $end
   $var wire  2 ^! exp_mem_size_arr[7] [1:0] $end
   $var wire  1 _! exp_mem_usign_load_arr[0] $end
   $var wire  1 `! exp_mem_usign_load_arr[1] $end
   $var wire  1 a! exp_mem_usign_load_arr[2] $end
   $var wire  1 b! exp_mem_usign_load_arr[3] $end
   $var wire  1 c! exp_mem_usign_load_arr[4] $end
   $var wire  1 d! exp_mem_usign_load_arr[5] $end
   $var wire  1 e! exp_mem_usign_load_arr[6] $end
   $var wire  1 f! exp_mem_usign_load_arr[7] $end
   $var wire  1 O! exp_mem_write_arr[0] $end
   $var wire  1 P! exp_mem_write_arr[1] $end
   $var wire  1 Q! exp_mem_write_arr[2] $end
   $var wire  1 R! exp_mem_write_arr[3] $end
   $var wire  1 S! exp_mem_write_arr[4] $end
   $var wire  1 T! exp_mem_write_arr[5] $end
   $var wire  1 U! exp_mem_write_arr[6] $end
   $var wire  1 V! exp_mem_write_arr[7] $end
   $var wire  2 o! exp_pc_src_arr[0] [1:0] $end
   $var wire  2 p! exp_pc_src_arr[1] [1:0] $end
   $var wire  2 q! exp_pc_src_arr[2] [1:0] $end
   $var wire  2 r! exp_pc_src_arr[3] [1:0] $end
   $var wire  2 s! exp_pc_src_arr[4] [1:0] $end
   $var wire  2 t! exp_pc_src_arr[5] [1:0] $end
   $var wire  2 u! exp_pc_src_arr[6] [1:0] $end
   $var wire  2 v! exp_pc_src_arr[7] [1:0] $end
   $var wire  1 ?! exp_reg_write_enable_arr[0] $end
   $var wire  1 @! exp_reg_write_enable_arr[1] $end
   $var wire  1 A! exp_reg_write_enable_arr[2] $end
   $var wire  1 B! exp_reg_write_enable_arr[3] $end
   $var wire  1 C! exp_reg_write_enable_arr[4] $end
   $var wire  1 D! exp_reg_write_enable_arr[5] $end
   $var wire  1 E! exp_reg_write_enable_arr[6] $end
   $var wire  1 F! exp_reg_write_enable_arr[7] $end
   $var wire  2 w! exp_result_src_arr[0] [1:0] $end
   $var wire  2 x! exp_result_src_arr[1] [1:0] $end
   $var wire  2 y! exp_result_src_arr[2] [1:0] $end
   $var wire  2 z! exp_result_src_arr[3] [1:0] $end
   $var wire  2 {! exp_result_src_arr[4] [1:0] $end
   $var wire  2 |! exp_result_src_arr[5] [1:0] $end
   $var wire  2 }! exp_result_src_arr[6] [1:0] $end
   $var wire  2 ~! exp_result_src_arr[7] [1:0] $end
   $var wire  3 $ funct3 [2:0] $end
   $var wire  3 5 funct3_arr[0] [2:0] $end
   $var wire  3 6 funct3_arr[1] [2:0] $end
   $var wire  3 7 funct3_arr[2] [2:0] $end
   $var wire  3 8 funct3_arr[3] [2:0] $end
   $var wire  3 9 funct3_arr[4] [2:0] $end
   $var wire  3 : funct3_arr[5] [2:0] $end
   $var wire  3 ; funct3_arr[6] [2:0] $end
   $var wire  3 < funct3_arr[7] [2:0] $end
   $var wire  7 % funct7 [6:0] $end
   $var wire  7 = funct7_arr[0] [6:0] $end
   $var wire  7 > funct7_arr[1] [6:0] $end
   $var wire  7 ? funct7_arr[2] [6:0] $end
   $var wire  7 @ funct7_arr[3] [6:0] $end
   $var wire  7 A funct7_arr[4] [6:0] $end
   $var wire  7 B funct7_arr[5] [6:0] $end
   $var wire  7 C funct7_arr[6] [6:0] $end
   $var wire  7 D funct7_arr[7] [6:0] $end
   $var wire  3 ." imm_type [2:0] $end
   $var wire  1 *" mem_read $end
   $var wire  2 ," mem_size [1:0] $end
   $var wire  1 -" mem_usign_load $end
   $var wire  1 +" mem_write $end
   $var wire  1 ) negative_flag $end
   $var wire  1 ] negative_flag_arr[0] $end
   $var wire  1 ^ negative_flag_arr[1] $end
   $var wire  1 _ negative_flag_arr[2] $end
   $var wire  1 ` negative_flag_arr[3] $end
   $var wire  1 a negative_flag_arr[4] $end
   $var wire  1 b negative_flag_arr[5] $end
   $var wire  1 c negative_flag_arr[6] $end
   $var wire  1 d negative_flag_arr[7] $end
   $var wire  7 # opcode [6:0] $end
   $var wire  7 - opcode_arr[0] [6:0] $end
   $var wire  7 . opcode_arr[1] [6:0] $end
   $var wire  7 / opcode_arr[2] [6:0] $end
   $var wire  7 0 opcode_arr[3] [6:0] $end
   $var wire  7 1 opcode_arr[4] [6:0] $end
   $var wire  7 2 opcode_arr[5] [6:0] $end
   $var wire  7 3 opcode_arr[6] [6:0] $end
   $var wire  7 4 opcode_arr[7] [6:0] $end
   $var wire  1 + overflow_flag $end
   $var wire  1 m overflow_flag_arr[0] $end
   $var wire  1 n overflow_flag_arr[1] $end
   $var wire  1 o overflow_flag_arr[2] $end
   $var wire  1 p overflow_flag_arr[3] $end
   $var wire  1 q overflow_flag_arr[4] $end
   $var wire  1 r overflow_flag_arr[5] $end
   $var wire  1 s overflow_flag_arr[6] $end
   $var wire  1 t overflow_flag_arr[7] $end
   $var wire  2 /" pc_src [1:0] $end
   $var wire  1 )" reg_write_enable $end
   $var wire  2 0" result_src [1:0] $end
   $var wire 32 & rs1_data [31:0] $end
   $var wire 32 E rs1_data_arr[0] [31:0] $end
   $var wire 32 F rs1_data_arr[1] [31:0] $end
   $var wire 32 G rs1_data_arr[2] [31:0] $end
   $var wire 32 H rs1_data_arr[3] [31:0] $end
   $var wire 32 I rs1_data_arr[4] [31:0] $end
   $var wire 32 J rs1_data_arr[5] [31:0] $end
   $var wire 32 K rs1_data_arr[6] [31:0] $end
   $var wire 32 L rs1_data_arr[7] [31:0] $end
   $var wire 32 ' rs2_data [31:0] $end
   $var wire 32 M rs2_data_arr[0] [31:0] $end
   $var wire 32 N rs2_data_arr[1] [31:0] $end
   $var wire 32 O rs2_data_arr[2] [31:0] $end
   $var wire 32 P rs2_data_arr[3] [31:0] $end
   $var wire 32 Q rs2_data_arr[4] [31:0] $end
   $var wire 32 R rs2_data_arr[5] [31:0] $end
   $var wire 32 S rs2_data_arr[6] [31:0] $end
   $var wire 32 T rs2_data_arr[7] [31:0] $end
   $var wire  1 ( zero_flag $end
   $var wire  1 U zero_flag_arr[0] $end
   $var wire  1 V zero_flag_arr[1] $end
   $var wire  1 W zero_flag_arr[2] $end
   $var wire  1 X zero_flag_arr[3] $end
   $var wire  1 Y zero_flag_arr[4] $end
   $var wire  1 Z zero_flag_arr[5] $end
   $var wire  1 [ zero_flag_arr[6] $end
   $var wire  1 \ zero_flag_arr[7] $end
   $scope module dut $end
    $var wire  4 %" alu_control [3:0] $end
    $var wire  2 &" alu_src_a_sel [1:0] $end
    $var wire  2 '" alu_src_b_sel [1:0] $end
    $var wire  1 1" branch_taken $end
    $var wire  3 (" branch_type [2:0] $end
    $var wire  1 * carry_flag $end
    $var wire  3 $ funct3 [2:0] $end
    $var wire  7 % funct7 [6:0] $end
    $var wire  3 ." imm_type [2:0] $end
    $var wire  1 *" mem_read $end
    $var wire  2 ," mem_size [1:0] $end
    $var wire  1 -" mem_usign_load $end
    $var wire  1 +" mem_write $end
    $var wire  1 ) negative_flag $end
    $var wire  7 # opcode [6:0] $end
    $var wire  1 + overflow_flag $end
    $var wire  2 /" pc_src [1:0] $end
    $var wire  1 )" reg_write_enable $end
    $var wire  2 0" result_src [1:0] $end
    $var wire 32 & rs1_data [31:0] $end
    $var wire  1 !" rs1_eq_rs2 $end
    $var wire  1 "" rs1_lt_rs2 $end
    $var wire  1 #" rs1_ltu_rs2 $end
    $var wire 32 ' rs2_data [31:0] $end
    $var wire  1 ( zero_flag $end
   $upscope $end
   $scope module unnamedblk1 $end
    $var wire 32 $" i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module riscv_pkg $end
   $var wire 32 5" DMEM_SIZE [31:0] $end
   $var wire  3 ?" FUNCT3_ADD [2:0] $end
   $var wire  3 ?" FUNCT3_ADDI [2:0] $end
   $var wire  3 D" FUNCT3_AND [2:0] $end
   $var wire  3 D" FUNCT3_ANDI [2:0] $end
   $var wire  3 ?" FUNCT3_BEQ [2:0] $end
   $var wire  3 B" FUNCT3_BGE [2:0] $end
   $var wire  3 D" FUNCT3_BGEU [2:0] $end
   $var wire  3 A" FUNCT3_BLT [2:0] $end
   $var wire  3 C" FUNCT3_BLTU [2:0] $end
   $var wire  3 @" FUNCT3_BNE [2:0] $end
   $var wire  3 ?" FUNCT3_JALR [2:0] $end
   $var wire  3 ?" FUNCT3_LB [2:0] $end
   $var wire  3 A" FUNCT3_LBU [2:0] $end
   $var wire  3 @" FUNCT3_LH [2:0] $end
   $var wire  3 B" FUNCT3_LHU [2:0] $end
   $var wire  3 E" FUNCT3_LW [2:0] $end
   $var wire  3 C" FUNCT3_OR [2:0] $end
   $var wire  3 C" FUNCT3_ORI [2:0] $end
   $var wire  3 ?" FUNCT3_SB [2:0] $end
   $var wire  3 @" FUNCT3_SH [2:0] $end
   $var wire  3 @" FUNCT3_SLL [2:0] $end
   $var wire  3 @" FUNCT3_SLLI [2:0] $end
   $var wire  3 E" FUNCT3_SLT [2:0] $end
   $var wire  3 E" FUNCT3_SLTI [2:0] $end
   $var wire  3 F" FUNCT3_SLTIU [2:0] $end
   $var wire  3 F" FUNCT3_SLTU [2:0] $end
   $var wire  3 B" FUNCT3_SRA [2:0] $end
   $var wire  3 B" FUNCT3_SRAI [2:0] $end
   $var wire  3 B" FUNCT3_SRL [2:0] $end
   $var wire  3 B" FUNCT3_SRLI [2:0] $end
   $var wire  3 ?" FUNCT3_SUB [2:0] $end
   $var wire  3 E" FUNCT3_SW [2:0] $end
   $var wire  3 A" FUNCT3_XOR [2:0] $end
   $var wire  3 A" FUNCT3_XORI [2:0] $end
   $var wire  7 G" FUNCT7_ADD [6:0] $end
   $var wire  7 G" FUNCT7_AND [6:0] $end
   $var wire  7 G" FUNCT7_OR [6:0] $end
   $var wire  7 G" FUNCT7_SLL [6:0] $end
   $var wire  7 G" FUNCT7_SLLI [6:0] $end
   $var wire  7 G" FUNCT7_SLT [6:0] $end
   $var wire  7 G" FUNCT7_SLTU [6:0] $end
   $var wire  7 H" FUNCT7_SRA [6:0] $end
   $var wire  7 H" FUNCT7_SRAI [6:0] $end
   $var wire  7 G" FUNCT7_SRL [6:0] $end
   $var wire  7 G" FUNCT7_SRLI [6:0] $end
   $var wire  7 H" FUNCT7_SUB [6:0] $end
   $var wire  7 G" FUNCT7_XOR [6:0] $end
   $var wire 32 5" MEM_SIZE [31:0] $end
   $var wire  7 7" OPCODE_AUIPC [6:0] $end
   $var wire  7 :" OPCODE_BRANCH [6:0] $end
   $var wire  7 =" OPCODE_I_TYPE [6:0] $end
   $var wire  7 8" OPCODE_JAL [6:0] $end
   $var wire  7 9" OPCODE_JALR [6:0] $end
   $var wire  7 ;" OPCODE_LOAD [6:0] $end
   $var wire  7 6" OPCODE_LUI [6:0] $end
   $var wire  7 >" OPCODE_R_TYPE [6:0] $end
   $var wire  7 <" OPCODE_STORE [6:0] $end
   $var wire 32 4" REG_ADDR_WIDTH [31:0] $end
   $var wire 32 3" XLEN [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0110111 #
b000 $
b0000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
0(
0)
0*
0+
b00000000000000000000000000000000 ,
b0110111 -
b0010111 .
b1100011 /
b1101111 0
b1100111 1
b0000011 2
b0100011 3
b0010011 4
b000 5
b000 6
b000 7
b000 8
b000 9
b010 :
b010 ;
b000 <
b0000000 =
b0000000 >
b0000000 ?
b0000000 @
b0000000 A
b0000000 B
b0000000 C
b0000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00010010001101000101011001111000 G
b00000000000000000000000000000000 H
b00000000000000000001000000000000 I
b00000000000000000000000000000100 J
b00000000000000000000000000001000 K
b00000000000000000000000000000101 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00010010001101000101011001111000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000010000 S
b00000000000000000000000000000000 T
0U
0V
1W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
b0000 u
b1011 v
b0000 w
b0000 x
b0000 y
b0000 z
b0000 {
b0000 |
b10 }
b01 ~
b00 !!
b01 "!
b00 #!
b00 $!
b00 %!
b00 &!
b01 '!
b01 (!
b00 )!
b01 *!
b01 +!
b01 ,!
b01 -!
b01 .!
b000 /!
b000 0!
b001 1!
b000 2!
b000 3!
b000 4!
b000 5!
b000 6!
07!
08!
19!
0:!
0;!
0<!
0=!
0>!
1?!
1@!
0A!
1B!
1C!
1D!
0E!
1F!
0G!
0H!
0I!
0J!
0K!
1L!
0M!
0N!
0O!
0P!
0Q!
0R!
0S!
0T!
1U!
0V!
b10 W!
b10 X!
b10 Y!
b10 Z!
b10 [!
b10 \!
b10 ]!
b10 ^!
0_!
0`!
0a!
0b!
0c!
0d!
0e!
0f!
b011 g!
b011 h!
b010 i!
b100 j!
b000 k!
b000 l!
b001 m!
b000 n!
b00 o!
b00 p!
b01 q!
b10 r!
b11 s!
b00 t!
b00 u!
b00 v!
b00 w!
b00 x!
b00 y!
b10 z!
b10 {!
b01 |!
b00 }!
b00 ~!
1!"
0""
0#"
b00000000000000000000000000000000 $"
b0000 %"
b10 &"
b01 '"
b000 ("
1)"
0*"
0+"
b10 ,"
0-"
b011 ."
b00 /"
b00 0"
01"
b00000000000000000000000000001000 2"
b00000000000000000000000000100000 3"
b00000000000000000000000000000101 4"
b00000000000000000000010000000000 5"
b0110111 6"
b0010111 7"
b1101111 8"
b1100111 9"
b1100011 :"
b0000011 ;"
b0100011 <"
b0010011 ="
b0110011 >"
b000 ?"
b001 @"
b100 A"
b101 B"
b110 C"
b111 D"
b010 E"
b011 F"
b0000000 G"
b0100000 H"
#1
b0010111 #
b00000000000000000000000000000001 $"
b1011 %"
b01 &"
#2
b1100011 #
b00010010001101000101011001111000 &
b00010010001101000101011001111000 '
1(
b00000000000000000000000000000010 $"
b0000 %"
b00 &"
b00 '"
b001 ("
0)"
b010 ."
b01 /"
11"
#3
b1101111 #
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
0(
b00000000000000000000000000000011 $"
b01 &"
b01 '"
b000 ("
1)"
b100 ."
b10 /"
b10 0"
01"
#4
b1100111 #
b00000000000000000001000000000000 &
0!"
b00000000000000000000000000000100 $"
b00 &"
b000 ."
b11 /"
#5
b0000011 #
b010 $
b00000000000000000000000000000100 &
b00000000000000000000000000000101 $"
1*"
b00 /"
b01 0"
#6
b0100011 #
b00000000000000000000000000001000 &
b00000000000000000000000000010000 '
1""
1#"
b00000000000000000000000000000110 $"
0)"
0*"
1+"
b001 ."
b00 0"
#7
b0010011 #
b000 $
b00000000000000000000000000000101 &
b00000000000000000000000000000000 '
0""
0#"
b00000000000000000000000000000111 $"
1)"
0+"
b000 ."
#8
b00000000000000000000000000001000 $"
